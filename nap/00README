
# nap.sh   : processes all EDFs/annotations in a folder via NAP
             i.e. calls nap1.sh (potentially batched via LSF)

# napn.sh  : wrapper script called by nap.sh, that calls nap1.sh 1 or more times
             i.e. this implements that concept of batch processing via LSF
             such that it is napn.sh that is sent to LSF (for large datasets, say n=1000, we
             don't want to send a 1000 separate jobs to LSF, but rather using this to send, e.g.
             10 batches of 100 each.    This is determined by the NAP_JOBN value in the default.conf
             The default is 1 which means no submission to LSF (i.e. run on same node).  
             PS.   could use job arrays etc to handle multiple jobs, but this should work just fine 
             at least for now.

# nap1.sh  : operates on a single EDF (and single matching annotation)

# dmerge   : takes results from nap.sh and creates a single table
             i.e. merging across individuals & domains
             see: http://zzz.bwh.harvard.edu/luna/merge/merge

# nap.sh : process folder with 1+ EDFs and annotations
#          creates sample list if it does not exist
#          calls napn.sh (multiple times, potentially with batching)
#          (todo) runs merge to create harmonized datasets across individuals
#
#  arg1 : run name
#  arg2 : folder with EDF and XML
#  arg3 : {optional) alternate conf file


# napn.sh : calls nap1.sh one or more times: from n1 to n2 in s.lst
#
#   arg1 : run name
#   arg2 : folder name
#   arg3 : n1 (line in s.lst)
#   arg4 : n2 (line in s.lst)
#   arg5 : alternate conf file


# nap1.sh : implements NAP for a single EDF
#           creates s.lst if id does not exist
#           (can be called standalone, instead of via nap.sh/napn.sh)
#           multiple calls to Luna, and this is where other code will be called from
#           all input from ${folder}  and deteremined by ${folder}/s.lst
#           all outout in ${folder}/nap/${id} which is created by this script
#           calls compile_tables.R to generate tables and plots for Luna-Shiny
#
#   arg1 : run name
#   arg2 : folder 
#   arg3 : EDF ID (to select from {$folder}/s.lst
#   arg4 : (optional) alternate conf file


# Notes:
#  assumes EDF is in form ID.edf and ID.xml and/or ID.annot 

# i.e. if data are at :
#   /path/to/nap/user1/upload1/

# e.g. if upload comprises just two files:
#   /path/to/nap/user1/upload1/learn-nsrr01.edf
#   /path/to/nap/user1/upload1/learn-nsrr01.xml

# call to nap.sh will be 

# bash nap.sh {run-label} /path/to/nap/user1/upload1/ 

# this will automatically create an `s.lst` that references these files

# note: currently, the only use of the run-label is to find the group in the 
#       canonical signals file

# after running nap.sh in the background, the output will be in 
#   /path/to/nap/user1/upload1/nap/learn-nsrr01/ 

# i.e. you will generate a link to URL /path/to/nap/user1/upload1/ 
#   and specify which EDF (learn-nsrr01) on the command line
#   the shiny app will then look for the NAP output in 
#      /path/to/nap/user1/upload1/nap/learn-nsrr01/ 
 
#   if the folder contained multiple EDFs, then the above run of nap.sh will create 
#   multiple output folders: 

#      /path/to/nap/user1/upload1/nap/learn-nsrr02/
#      /path/to/nap/user1/upload1/nap/learn-nsrr03/
#   etc


# the individual nap/ folder contains various classes of file, all generated by nap.sh
# 1) .txt and .txt.gz diretly from Luna (or other code, e.g. Matlab)
# 2) .RData files that have that information compiled; these are generated by compile-tables.R
#    which is called by nap1.sh
# 3) nap.log and nap.err
# 4) annots/ folder
# 5) a canonical EDF and canonical.lst that points to this (linking ID and annotation)

# e.g.
# ~/tmp/data/user1/example1/nap/learn-nsrr01/                                                                                    

# luna_core_HEADERS_CH.txt
# luna_core_HEADERS.txt
# --> HEADERS-tab.RData

# luna_macro_HYPNO.txt
# luna_macro_HYPNO_C.txt
# luna_macro_HYPNO_E.txt
# --> HYPNO-tab.RData

# luna_spec_PSD_B_CH_SS-N2.txt
# luna_spec_PSD_B_CH_SS-N23.txt
# --> PSD-tab.RData



